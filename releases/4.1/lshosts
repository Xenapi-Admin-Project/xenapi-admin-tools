#!/bin/bash

# Lists the number of XCP/Xenserver Virtual Machines on each host
# Author: Grant McWilliams (grantmcwilliams.com)
# Version: 0.5
# Date: July 22, 2012
# Version: 0.6
# Date: August 20, 2012
# Complete rewrite
# Version 0.7
# Date: Sept 12, 2012
# Changed to the new style getcolwidth and printspaces
# Version 0.8
# Date: Sept 15, 2012
# Changed to MODE structure to allow for future expansion
# Version: 0.9
# Date: Oct 14, 2012
# Moved to XCP tools 3.0 spec, added sort_arrays(), moved functions to library.sh.
# Version: 0.9.5 
# Date: Nov 14, 2012
# Optimized a bit, changed to fsort_arrays. 
# Version: 0.9.6
# Date: Nov 20, 2012
# Fixed Unicode issues for names
# Version: 0.9.7
# Date: Nov 28, 2012
# Fixed bug in outputing map parameters - software version, cpu cores, cpu speed, network backend etc..
# Version: 0.9.8
# Date: Dec 9, 2012
# Added match statement for XCP 1.6 platform_name/platform_version.

setup()
{
	SCRIPTDIR=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))
	if [[ -e "$SCRIPTDIR/xaptools.lib" ]] ;then
		source "$SCRIPTDIR/xaptools.lib" 
	else
		echo "Unable to load xaptools.lib"
		exit 1
	fi	setcolors
	VERSION="0.9.7"
	DEFSPACE="5"
	MINSPACE="$DEFSPACE"
	MODE="name"
}

syntax()
{
		echo "$(basename $0) $VERSION"
        echo ""
        echo "Syntax: $(basename $0) [options]"
        echo "Options:"
        echo "-d - shell debugging"
        echo "-h - this help text"
        echo "-u - show UUIDs"
        echo "-n - show Names (default)"
        echo "-c - output comma seperated values"
        echo ""
        exit
}

setup
while getopts :dhunc opt ;do
        case $opt in
                d) set -x ;;
                h) syntax ;;
                c) CSV="yes" ;;
                u) MODE="uuid" ;;
                n) MODE="name" ;;
                \?) echo "Unknown option"; syntax ;;
        esac
done
shift $(($OPTIND - 1))
getpoolcreds

# Set Title array depending on MODE
case "$MODE" in
	"uuid") TITLES=('Host UUID' 'Active VMs' 'SW' 'Ver' 'Processor' 'Cores' 'Mhz' 'Tot Mem' 'Free Mem' 'Network') ;;
	"name") TITLES=('Host' 'Active VMs' 'SW' 'Ver' 'Processor' 'Cores' 'Mhz' 'Tot Mem' 'Free Mem' 'Network') ;;
esac

gethostdata
# Populate data arrays
for i in $(seq 0 $(( ${#HOSTUUIDS[@]} - 1 )) ) ;do
	HOSTVMNUM[$i]=$(xe vm-list params=resident-on power-state=running is-control-domain=false | grep -c "${HOSTUUIDS[$i]}")
	IFS=$'\n'
	for PARAM in $(xe host-param-get uuid="${HOSTUUIDS[$i]}" param-name=software-version | sed 's/; /\n/g') ;do
		case "$PARAM" in
			product_brand:* | platform_name:*) 		HOSTSWTYPE[$i]="${PARAM##*: }" 	; continue 	;;
			product_version:* | platform_version:*) HOSTSWVER[$i]="${PARAM##*: }" 	; continue	;;
			network_backend:*) 						HOSTNETWORK[$i]="${PARAM##*: }" ; continue 	;;
		esac
	done
	for PARAM in $(xe host-param-get uuid="${HOSTUUIDS[$i]}" param-name=cpu_info | sed 's/; /\n/g') ;do
		case "$PARAM" in
			vendor:*) 		HOSTCPUTYPE[$i]="${PARAM##*: }"  ; continue	;;
			cpu_count:*) 	HOSTCPUCOUNT[$i]="${PARAM##*: }" ; continue	;;
			speed:*) 		HOSTCPUSPEED[$i]="${PARAM##*: }" ; continue	;;
		esac
	done
	HOSTMAXMEM[$i]=$(getunit $(xe host-param-get uuid="${HOSTUUIDS[$i]}" param-name=memory-total))
	HOSTMAXFREE[$i]=$(getunit $(xe host-param-get uuid="${HOSTUUIDS[$i]}" param-name=memory-free))
done


if [[ "${#HOSTUUIDS[@]}" -lt 3 ]] ;then
	sort_arrays HOSTNAMES HOSTUUIDS HOSTVMNUM HOSTSWTYPE HOSTCPUTYPE HOSTCPUCOUNT HOSTCPUSPEED HOSTMAXMEM HOSTMAXFREE HOSTNETWORK
else
	fsort_arrays HOSTNAMES HOSTUUIDS HOSTVMNUM HOSTSWTYPE HOSTCPUTYPE HOSTCPUCOUNT HOSTCPUSPEED HOSTMAXMEM HOSTMAXFREE HOSTNETWORK
fi

# Get the length of each column and store it in COLLONGEST[]
case "$MODE" in
	"uuid") COLLONGEST[0]=$(getcolwidth "${TITLES[0]}" "${HOSTUUIDS[@]}") ;;
	"name") COLLONGEST[0]=$(getcolwidth "${TITLES[0]}" "${HOSTNAMES[@]}");;
esac
COLLONGEST[1]=$(getcolwidth "${TITLES[1]}" "${HOSTVMNUM[@]}")
COLLONGEST[2]=$(getcolwidth "${TITLES[2]}" "${HOSTSWTYPE[@]}")
COLLONGEST[3]=$(getcolwidth "${TITLES[3]}" "${HOSTSWVER[@]}")
COLLONGEST[4]=$(getcolwidth "${TITLES[4]}" "${HOSTCPUTYPE[@]}")
COLLONGEST[5]=$(getcolwidth "${TITLES[5]}" "${HOSTCPUCOUNT[@]}")
COLLONGEST[6]=$(getcolwidth "${TITLES[6]}" "${HOSTCPUSPEED[@]}")
COLLONGEST[7]=$(getcolwidth "${TITLES[7]}" "${HOSTMAXMEM[@]}")
COLLONGEST[8]=$(getcolwidth "${TITLES[8]}" "${HOSTMAXFREE[@]}")
COLLONGEST[9]=$(getcolwidth "${TITLES[9]}" "${HOSTNETWORK[@]}")

printheadings
# Print data columns
for i in $(seq 0 $(( ${#HOSTUUIDS[@]} - 1 )) ) ;do
	case "$MODE" in
		"uuid") cecho "${HOSTUUIDS[$i]}" cyan ; printspaces "${COLLONGEST[0]}" "${#HOSTUUIDS[$i]}"  ;;
		"name") cecho "${HOSTNAMES[$i]}" cyan ; printspaces "${COLLONGEST[0]}" "${#HOSTNAMES[$i]}"  ;;
	esac
	cecho "${HOSTVMNUM[$i]}" blue ; printspaces "${COLLONGEST[1]}" "${#HOSTVMNUM[$i]}" 
	cecho "${HOSTSWTYPE[$i]}" blue ; printspaces "${COLLONGEST[2]}" "${#HOSTSWTYPE[$i]}" 
	cecho "${HOSTSWVER[$i]}" blue ; printspaces "${COLLONGEST[3]}" "${#HOSTSWVER[$i]}" 
	cecho "${HOSTCPUTYPE[$i]}" blue ; printspaces "${COLLONGEST[4]}" "${#HOSTCPUTYPE[$i]}" 
	cecho "${HOSTCPUCOUNT[$i]}" blue ; printspaces "${COLLONGEST[5]}" "${#HOSTCPUCOUNT[$i]}" 
	cecho "${HOSTCPUSPEED[$i]}" blue ; printspaces "${COLLONGEST[6]}" "${#HOSTCPUSPEED[$i]}" 
	cecho "${HOSTMAXMEM[$i]}" blue ; printspaces "${COLLONGEST[7]}" "${#HOSTMAXMEM[$i]}" 
	cecho "${HOSTMAXFREE[$i]}" blue ; printspaces "${COLLONGEST[8]}" "${#HOSTMAXFREE[$i]}" 
	cecho "${HOSTNETWORK[$i]}" blue ; printspaces "${COLLONGEST[9]}" "${#HOSTNETWORK[$i]}" 
	echo ""
done

