#!/bin/bash
#
# 
# Script which lets you copy an ssh public key into a Linux VM on 
# Xenserver. The VM cannot be running.
# Does not handle VMs with more than one Virtual Block Device - yet.
# It does handle a VM having multiple partitions on it's one Virtual Block Device.

XE="/opt/xensource/bin/xe"
if [ ! -e ${XE} ]; then
  echo Must run on a XenServer host.
  exit 1
fi

user_id="root"
control_domain_uuid=$(xe vm-list  is-control-domain=true params=uuid --minimal)

usage()
{
    echo "Usage: $0 [-u <VM UUID>] [-n <VM NAME] [-k <key>] [-i <User ID/Name> ]"
    echo
    echo " -u: UUID of the VM to add the key to"
    echo " -n: Name of the VM to add the key to"
    echo " -k: Location of SSH public key"
    echo " -i: User ID/Name"
    echo " -h: This help message"
    echo
    echo "Either -u or -n must be supplied to specify the VM to edit"
    exit 1
}

while getopts "hu:n:k:" opt ; do
    case $opt in
    h) usage ;;
    u) vm_uuid="${OPTARG}" ;;
    n) vm_name="${OPTARG}" ;;
    k) ssh_key="${OPTARG}" ;;
    i) user_id="${OPTARG}" ;;
    *) echo "Invalid option"; usage ;;
    esac
done

# Set ssh_key
if [[ -z ${ssh_key} ]] ;then
	if [[ ! -e $HOME/.ssh/id_rsa.pub ]] ;then
		echo "SSH key not specified and ${HOME}/.ssh/id_rsa.pub not found"
		usage
	else
		ssh_key="$HOME/.ssh/id_rsa.pub"
	fi
fi

# determine a VM UUID
IFS=,
if [[ "${vm_name}" != "" ]]; then
   vm_uuids=$(${XE} vm-list name-label="${vm_name}" params=uuid --minimal)
   num_vm_uuids=0
   for vm in ${vm_uuids}; do
      num_vm_uuids=$(( ${num_vm_uuids} + 1 ))
   done
   if [[ ${num_vm_uuids} -eq 0 ]]; then
      echo Unable to find VMs matching name-label: ${vm_name}
      exit 1
   elif [[ ${num_vm_uuids} -gt 1 ]]; then
      echo Found multiple VMs with name-label: ${vm_name}
      echo ${vm_uuids}
      echo Please specify one of the UUIDs using the -u option
      exit 1
   fi
   vm_uuid=${vm_uuids}
fi

# verify that the VM UUID is valid
if [[ "${vm_uuid}" = "" ]]; then 
	usage; 
fi

checkuuid=$(${XE} vm-list uuid="${vm_uuid}" params=uuid --minimal)
if [[ "${checkuuid}" = "" ]]; then
    echo Specified VM UUID "${vm_uuid}" does not exist.
    exit 1
fi

remove_vbd()
{
	vbdu="$1"
	if [[ ! -z "${vbdu}" ]]; then
		echo -n "Unplugging VBD: "
		vbd_dev=$(${XE} vbd-list uuid=${vbdu} params=device --minimal)
		IFS=$' \t\n'
		
		# Unmount all partitions - remove all mountpoints
		for DEV in $(sfdisk -l /dev/${vbd_dev} | grep '^/dev/.*' | awk '{print $1}') ;do
			if grep -q ${DEV} /proc/mounts ;then
				mountpoint=$(grep ${DEV} /proc/mounts | awk '{print $2}')
				umount ${DEV}
				rmdir ${mountpoint}
			fi
		done
		# Unplug and destroy VBD
		${XE} vbd-unplug uuid=${vbdu} timeout=20
		# poll for the device to go away if we know its name
		if [[ "${device}" != "" ]]; then
			device_gone=0
			for ((i=0; i<10; i++)); do
				echo -n "."
				if [[ ! -b ${device} ]]; then
					echo " done"
					device_gone=1
					break
				fi
				sleep 1
			done
			if [[ ${device_gone} -eq 0 ]]; then
				echo " failed"
				echo Please destroy VBD ${vbdu} manually.
			else
				${XE} vbd-destroy uuid=${vbdu}
			fi
		fi	
	fi
}

remove_lvm()
{
	# Beginnings of an lvm remove function
	vgchange -an
	kpartx -d
	losetup -d
}

cleanup()
{
	remove_vbd ${vbd_uuid} 
	rmdir ${mnt}
	exit 0
}

# Find the VBD for the VM - only handles ONE VBD per VM - neet to fix
IFS=","
vbdlist=$(${XE} vbd-list vm-uuid=${vm_uuid} params=uuid --minimal)
num_vbds=0
i=0
for vbd in ${vbdlist}; do
	vbds[$i]=${vbd}
	(( i++ ))
done
if [[ ${#vbds[@]} -eq 0 ]]; then
   echo "Unable to find a disk for VM."
   exit 1
elif [[ ${#vbds[@]} -gt 1 ]]; then
   echo "Found ${num_vbds} for VM, but only 1 is allowed."
   exit 1
fi

# we now know that there is only one VBD, so use that
vbd_uuid=${vbds[0]}

IFS=","
vdis=$(${XE} vbd-param-get uuid=${vbd_uuid} param-name=vdi-uuid)
num_vdis=0
for vdi in ${vdis} ;do
	num_vdis=$(( ${num_vdis} + 1 ))
done
if [[ ${num_vdis} -eq 0 ]]; then
   echo "Unable to find a virtual disk for VM."
   exit 1
elif [[ ${num_vdis} -gt 1 ]]; then
   echo "Found ${num_vdis} Virtual disks for VM, but only 1 is allowed."
   echo "Perhaps a VBD is already created for the VDI on the Control Domain"
   exit 1
fi

# we now know that there is only one VDI, so use that
vdi_uuid="${vdis}"
if [[ "${vdi_uuid}" = "" ]]; then
    echo Unable to determine VDI associated with VBD ${vbd_uuid}
    exit 1
fi


# check if the VDI is already attached to the control domain and remove it
vbd_uuids=$(${XE} vbd-list vdi-uuid=${vdi_uuid} params=uuid --minimal)
for vbd_uuid in ${vbd_uuids} ;do
	vbd_vm_uuid=$(${XE} vbd-list uuid=${vbd_uuid} params=vm-uuid --minimal)
	vbd_vm_cd=$(${XE} vm-list uuid=${vbd_vm_uuid} params=is-control-domain --minimal)
	if [[ "${vbd_vm_cd}" = 'true' ]] ;then
		remove_vbd ${vbd_uuid}
	fi
done


for vbd in ${vbd_uuids}; do
   attached=$(${XE} vbd-list params=currently-attached uuid=${vbd} --minimal)
   case ${attached} in
   true)
     vm_uuid=$(${XE} vbd-list params=vm-uuid uuid=${vbd} --minimal)
     echo "The VDI is currently in use by VBD: ${vbd}"
     echo "The associated VM is: ${vm_uuid}"
     echo ""
     ${XE} vm-list uuid=${vm_uuid}
     echo "Please shut down any running VMs which are currently using the disk."
     exit 1
     ;;
   false)
     ;;
   *)
     echo "Internal error: unknown currently-attached result: ${attached}"
     ;;
   esac
done

echo -n "Creating dom0 VBD: "
vbd_uuid=$(${XE} vbd-create vm-uuid=${control_domain_uuid} vdi-uuid=${vdi_uuid} device=autodetect)
echo ${vbd_uuid}

if [[ $? -ne 0 || -z "${vbd_uuid}" ]]; then
  echo "error creating VBD for dom0 block attach"
  cleanup
  exit 1
fi

echo -n "Plugging VBD: "
${XE} vbd-plug uuid=${vbd_uuid}
echo ${device}

device="/dev/$(${XE} vbd-param-get uuid=${vbd_uuid} param-name=device)"

if [[ ! -b ${device} ]]; then
  echo "${device}: not a block special"
  cleanup
  exit 1
fi

device_found=0
echo -n "Waiting for ${device}${device_number}: "
for ((i=0; i<5; i++)); do
   echo -n '.'
   if [[ -b "${device}" ]]; then
		device_found=1
		echo "Found ${device}"
		break
   fi
   sleep 1
done

if [[ ${device_found} -eq 0 ]]; then
   echo "Device(s) not found."
   cleanup
   exit 1
fi

# Make the mount directory for the VM
mnt="/var/run/copy-key_${vdi_uuid}"
mkdir -p "${mnt}"

#Use kpartx instead of mounting the non-LVM devices



#i=0
#IFS=$'\n'
#for DEV in $(sfdisk -l ${device} | grep '^/dev/.*' | awk '{print $1}') ;do
#	DEVICES[$i]="${DEV}"
#	DEVNUM[$i]=${DEV##*${device}}
#	DEVTYPE[$i]=$(sfdisk -c  ${device} ${DEVNUM[$i]})
#	(( i++ ))
#done

#for i in $(seq 0 $(( ${#DEVICES[@]} - 1 )) ) ;do
#	case ${DEVTYPE[$i]} in 
#		"83") 
#			echo -n "Mounting filesystem ${DEVICES[$i]}:"
			#if [[ ! -d "${mnt}/hd${i}" ]] ;then
			#	mkdir -p "${mnt}/hd${i}"
			#fi
			#count=0
			#while [[ "$count" -lt 5 ]] ;do
			#	if [[ ! -e ${DEVICES[$i]} ]] ; then
			#		sleep 1 
			#		(( count++ ))
			#	else 
			#		break
			#	fi 
			#done
			
			#if [[ -e ${DEVICES[$i]} ]] ;then
			#	mount ${DEVICES[$i]} ${mnt}/hd${i} #> /dev/null 2>&1
			#else
			#	echo -n " doesn't exist"
			#fi
			;;
#		"8e")
#			echo "LVM"
#			;;
#		"0")
#			:
#			;;
#	esac
#done

echo " done"
read blank

home_dir=$(find ${mnt} -type d -name ${user_id})
if [[ -z "$home_dir" ]] ;then
	echo "Cannot find home directory for ${user_id}"
	cleanup
fi

if [[ ! -d "${home_dir}/.ssh" ]] ;then
	echo "${user_id}'s ssh directory doesn't exit - creating"
	mkdir -p "${home_dir}/.ssh"
	uid=$(stat -c %u ${home_dir})
	gid=$(stat -c %g ${home_dir})
    chown ${uid}:${gid} "${home_dir}/.ssh"
    # Copy SSH public key
    cat "${}" >> "${home_dir}/.ssh/authorized_keys"
    chmod -R 700 "${home_dir}/.ssh"
fi

cleanup
